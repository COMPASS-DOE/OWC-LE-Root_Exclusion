filter(str_detect(Sample_Name, "CCB"))%>%
mutate(rep = row_number())
NH3_blks <- df_all %>%
filter(Test == "Ammonia (PPS)")%>%
filter(str_detect(Sample_Name, "CCB"))%>%
mutate(rep = row_number())
PO4_blks <- df_all %>%
filter(Test == "Phosphate ")%>%
filter(str_detect(Sample_Name, "CCB"))%>%
mutate(rep = row_number())
SO4_blks <- df_all %>%
filter(Test == "Sulfate")%>%
filter(str_detect(Sample_Name, "CCB"))%>%
mutate(rep = row_number())
NO2_blks <- df_all %>%
filter(Test == "Nitrite")%>%
filter(str_detect(Sample_Name, "CCB"))%>%
mutate(rep = row_number())
#Pull out samples from df_all to calc quantile
samples <- df_all %>%
filter(str_detect(Sample_Name, c("cm"))) ####Not sure if this is the best way to identify samples####
#Calculating the lowest 25% of sample concentrations to compare to the blank concentrations
NOx_only <- samples %>%
filter(Test == "Nitrate (NOx)")
blk_flag_NOx <- quantile(NOx_only$Conc, prob=c(.25))   #this gives you the lower 25% quartile of the data
blk_flag_NOx <- ifelse(blk_flag_NOx < NOx_dl, NOx_dl/2, blk_flag_NOx) #this will determine if the Q1 of samples is below the detection limit, if it is then it will replace the flag with half of the detection limit
NOx_blks$NOx_diff_flag <-  ifelse(NOx_blks$Conc <= blk_flag_NOx, 'YES', 'NO, rerun')
NH3_only <- samples %>%
filter(Test == "Ammonia (PPS)")
blk_flag_NH3 <- quantile(NH3_only$Conc, prob=c(.25))   #this gives you the lower 25% quartile of the data
blk_flag_NH3 <- ifelse(blk_flag_NH3 < NH3_dl, NH3_dl/2, blk_flag_NH3) #this will determine if the Q1 of samples is below the detection limit, if it is then it will replace the flag with half of the detection limit
NH3_blks$NH3_diff_flag <-  ifelse(NH3_blks$Conc <= blk_flag_NH3, 'YES', 'NO, rerun')
PO4_only <- samples %>%
filter(Test == "Phosphate ")
blk_flag_PO4 <- quantile(PO4_only$Conc, prob=c(.25))   #this gives you the lower 25% quartile of the data
blk_flag_PO4 <- ifelse(blk_flag_PO4 < PO4_dl, PO4_dl/2, blk_flag_PO4) #this will determine if the Q1 of samples is below the detection limit, if it is then it will replace the flag with half of the detection limit
PO4_blks$PO4_diff_flag <-  ifelse(PO4_blks$Conc <= blk_flag_PO4, 'YES', 'NO, rerun')
SO4_only <- samples %>%
filter(Test == "Sulfate")
blk_flag_SO4 <- quantile(SO4_only$Conc, prob=c(.25))   #this gives you the lower 25% quartile of the data
blk_flag_SO4 <- ifelse(blk_flag_SO4 < SO4_dl, SO4_dl/2, blk_flag_SO4) #this will determine if the Q1 of samples is below the detection limit, if it is then it will replace the flag with half of the detection limit
SO4_blks$SO4_diff_flag <-  ifelse(SO4_blks$Conc <= blk_flag_SO4, 'YES', 'NO, rerun')
NO2_only <- samples %>%
filter(Test == "Nitrite")
blk_flag_NO2 <- quantile(NO2_only$Conc, prob=c(.25))   #this gives you the lower 25% quartile of the data
blk_flag_NO2 <- ifelse(blk_flag_NO2 < NO2_dl, NO2_dl/2, blk_flag_NO2) #this will determine if the Q1 of samples is below the detection limit, if it is then it will replace the flag with half of the detection limit
NO2_blks$NO2_diff_flag <-  ifelse(NO2_blks$Conc <= blk_flag_NO2, 'YES', 'NO, rerun')
#calculate the percent of check standards that are within the range based on the flag
NOx_blks_percent <- (sum(NOx_blks$NOx_diff_flag == "YES")/nrow(NOx_blks))*100
NH3_blks_percent <- (sum(NH3_blks$NH3_diff_flag == "YES")/nrow(NH3_blks))*100
PO4_blks_percent <- (sum(PO4_blks$PO4_diff_flag == "YES")/nrow(PO4_blks))*100
SO4_blks_percent <- (sum(SO4_blks$SO4_diff_flag == "YES")/nrow(SO4_blks))*100
NO2_blks_percent <- (sum(NO2_blks$NO2_diff_flag == "YES")/nrow(NO2_blks))*100
#report out if flags indicate need for rerun
ifelse(NOx_blks_percent >= 60,
">60% of NOx Blanks are below the lower 25% quartile of samples or 1/2 detection limit - PROCEED",
"<60% of NOx Blanks are lower 25% quartile of samples or 1/2 the detection limit - REASSESS")
ifelse(NH3_blks_percent >= 60,
">60% of NH3 Blanks are below the lower 25% quartile of samples - PROCEED",
"<60% of NH3 Blanks are lower 25% quartile of samples - REASSESS")
ifelse(PO4_blks_percent >= 60,
">60% of PO4 Blanks  are below the lower 25% quartile of samples- PROCEED",
"<60% of PO4 Blanks are lower 25% quartile of samples - REASSESS")
ifelse(SO4_blks_percent >= 60,
">60% of SO4 Blanks  are below the lower 25% quartile of samples- PROCEED",
"<60% of SO4 Blanks are lower 25% quartile of samples - REASSESS")
ifelse(NO2_blks_percent >= 60,
">60% of NO2 Blanks  are below the lower 25% quartile of samples- PROCEED",
"<60% of NO2 Blanks are lower 25% quartile of samples - REASSESS")
#plotting the blanks compared to the lower 25% of conc (what the flag is)
NOx_blks_plot <-  ggplot(data = NOx_blks, aes(x = rep, y = Conc, fill=NOx_diff_flag)) +
geom_bar(stat = 'identity') +
scale_fill_manual(values = c("YES" = "deepskyblue3", "NO, rerun" = "darkred")) +
theme_classic() + labs(x= " ", y="NOx (mg/L)", title="NOx Blanks") +
theme(legend.position="bottom") +
geom_hline(yintercept= as.numeric(blk_flag_NOx), linetype="dashed",
color = "black", linewidth=1)  +
guides(fill=guide_legend(title="Blank Conc <25% Quartile Samples"))
NH3_blks_plot <-  ggplot(data = NH3_blks, aes(x = rep, y = Conc, fill=NH3_diff_flag)) +
geom_bar(stat = 'identity') +
scale_fill_manual(values = c("YES" = "deepskyblue3", "NO, rerun" = "darkred")) +
theme_classic() + labs(x= " ", y="NH3  (mg/L)", title="NH3 Blanks") +
theme(legend.position="bottom") +
geom_hline(yintercept=as.numeric(blk_flag_NH3), linetype="dashed",
color = "black", linewidth=1)  +
guides(fill=guide_legend(title="Blank Conc <25% Quartile Samples"))
PO4_blks_plot <-  ggplot(data = PO4_blks, aes(x = rep, y = Conc, fill=PO4_diff_flag)) +
geom_bar(stat = 'identity') +
scale_fill_manual(values = c("YES" = "deepskyblue3", "NO, rerun" = "darkred")) +
theme_classic() + labs(x= " ", y="PO4 (mg/L)", title="PO4 Blanks") +
theme(legend.position="bottom") +
geom_hline(yintercept=as.numeric(blk_flag_PO4), linetype="dashed",
color = "black", linewidth=1)  +
guides(fill=guide_legend(title="Blank Conc <25% Quartile Samples"))
SO4_blks_plot <-  ggplot(data = SO4_blks, aes(x = rep, y = Conc, fill=SO4_diff_flag)) +
geom_bar(stat = 'identity') +
scale_fill_manual(values = c("YES" = "deepskyblue3", "NO, rerun" = "darkred")) +
theme_classic() + labs(x= " ", y="SO4 (mg/L)", title="SO4 Blanks") +
theme(legend.position="bottom") +
geom_hline(yintercept=as.numeric(blk_flag_SO4), linetype="dashed",
color = "black", linewidth=1)  +
guides(fill=guide_legend(title="Blank Conc <25% Quartile Samples"))
NO2_blks_plot <-  ggplot(data = NO2_blks, aes(x = rep, y = Conc, fill=NO2_diff_flag)) +
geom_bar(stat = 'identity') +
scale_fill_manual(values = c("YES" = "deepskyblue3", "NO, rerun" = "darkred")) +
theme_classic() + labs(x= " ", y="NO2 (mg/L)", title="NO2 Blanks") +
theme(legend.position="bottom") +
geom_hline(yintercept=as.numeric(blk_flag_NO2), linetype="dashed",
color = "black", linewidth=1)  +
guides(fill=guide_legend(title="Blank Conc <25% Quartile Samples"))
#Combined Plot
Blks_Plots <- ggarrange(
NOx_blks_plot,
NH3_blks_plot,
PO4_blks_plot,
SO4_blks_plot,
NO2_blks_plot,
nrow = 1,
ncol = 5,
common.legend = TRUE,
legend = "bottom")
print(Blks_Plots)
#find average of run blanks for flagging samples later
# Compute averages
blk_avg_NOx <- mean(NOx_blks$Conc, na.rm = TRUE)
blk_avg_NH3 <- mean(NH3_blks$Conc, na.rm = TRUE)
blk_avg_PO4 <- mean(PO4_blks$Conc, na.rm = TRUE)
blk_avg_SO4 <- mean(SO4_blks$Conc, na.rm = TRUE)
blk_avg_NO2 <- mean(NO2_blks$Conc, na.rm = TRUE)
# Create a data frame
blank_avgs <- data.frame(
Test = c("NOx", "NH3", "PO4", "SO4", "NO2"),
Blank_Mean_Conc = c(blk_avg_NOx, blk_avg_NH3, blk_avg_PO4, blk_avg_SO4, blk_avg_NO2)
)
# Pretty print
knitr::kable(blank_avgs, caption = "Mean Concentration of Blanks", digits = 4)
#write out a flag to the sample dataframe if more than 60% of the blanks are above the lower 25% quantile of samples
if (NOx_blks_percent <= chks_flag) {
df_all_cor$NOx_flag <- ifelse(
df_all_cor$NOx_flag != "",
paste0(df_all_cor$NOx_flag, "; NOx blanks out of range"),
"NOx blanks out of range"
)
}
if (NH3_blks_percent <= chks_flag) {  # assuming you have tn_chks_percent similarly
df_all_cor$NH3_flag <- ifelse(
df_all_cor$NH3_flag != "",
paste0(df_all_cor$NH3_flag, "; NH3 blanks out of range"),
"NH3 blanks out of range"
)
}
if (PO4_blks_percent <= chks_flag) {  # assuming you have tn_chks_percent similarly
df_all_cor$PO4_flag <- ifelse(
df_all_cor$PO4_flag != "",
paste0(df_all_cor$PO4_flag, "; PO4 blanks out of range"),
"PO4 blanks out of range"
)
}
if (SO4_blks_percent <= chks_flag) {  # assuming you have tn_chks_percent similarly
df_all_cor$SO4_flag <- ifelse(
df_all_cor$SO4_flag != "",
paste0(df_all_cor$SO4_flag, "; PO4 blanks out of range"),
"PO4 blanks out of range"
)
}
if (NO2_blks_percent <= chks_flag) {  # assuming you have tn_chks_percent similarly
df_all_cor$NO2_flag <- ifelse(
df_all_cor$NO2_flag != "",
paste0(df_all_cor$NO2_flag, "; PO4 blanks out of range"),
"PO4 blanks out of range"
)
}
# Chunk 11: Unit conversion to uM
#Convert values based on the Test ID
####Need to check this####
##Everything is mg/L except Nitrite which is ug/L
# ((mg/L) /1000) = g/L
# (g/L) / (g/mol)) = mol/L
# (mol/L) * 1,000,000 = umol/L
##Nitrite
# ((ug/L) /100,000) = g/L
# (g/L) / (g/mol)) = mol/L
# (mol/L) * 100,000 = umol/L
samples <- samples %>%
mutate(
Conc_uM = case_when(
Test == "Nitrate (NOx)" ~ (((as.numeric(samples$Conc))/Con1)/N_mw)*Con2,
Test == "Ammonia (PPS)" ~ (((as.numeric(samples$Conc))/Con1)/N_mw)*Con2,
Test == "Phosphate " ~ (((as.numeric(samples$Conc))/Con1)/P_mw)*Con2,
Test == "Sulfate" ~ (((as.numeric(samples$Conc))/Con1)/S_mw)*Con2,
Test == "Nitrite" ~ (((as.numeric(samples$Conc))/Con2)/N_mw)*Con2,
TRUE ~ as.numeric(NA)  # fallback in case of unexpected value
),
# Replace negatives with 0 in 'value' and 'value_converted'
Conc = pmax(Conc, 0),
Conc_uM = pmax(Conc_uM, 0)
)
head(samples)
# Chunk 12: Sample Flagging
####Need to know detection limit for all analytes####
cat("Sample Flagging")
#Flagging data if the concentration is outside the standards range
samples_flagged <- samples %>%
mutate(
Conc_flag = case_when(
Test == "Nitrate (NOx)" & Conc < NOx_dl ~ "bdl",
Test == "Nitrate (NOx)" & Conc > NOx_top    ~ "adl",
Test == "Nitrate (NOx)"               ~ "Within_Range",
Test == "Ammonia (PPS)" & Conc < NH3_dl ~ "bdl",
Test == "Ammonia (PPS)" & Conc > NH3_top    ~ "adl",
Test == "Ammonia (PPS)"                ~ "Within_Range",
Test == "Phosphate " & Conc < PO4_dl  ~ "bdl",
Test == "Phosphate " & Conc > PO4_top   ~ "adl",
Test == "Phosphate "                ~ "Within_Range",
Test == "Sulfate" & Conc < SO4_dl  ~ "bdl",
Test == "Sulfate" & Conc > SO4_top   ~ "adl",
Test == "Sulfate"                ~ "Within_Range",
Test == "Nitrite" & Conc < NO2_dl  ~ "bdl",
Test == "Nitrite" & Conc > NO2_top   ~ "adl",
Test == "Nitrite"                ~ "Within_Range",
TRUE ~ NA_character_  # fallback for unexpected values
)
)
# Chunk 13: Sample Identification
cat("Sample Processing")
# 1_43_R76_5292024_ch6_trE_cm
head(nutr_metadata)
head(samples_flagged)
samples_flagged <- samples_flagged %>%
separate(
col = Sample_Name,
sep = "_",
into = c("Box ", "Vial_number", "Vial_ID", "Date", "Chamber_ID", "Treatment", "Depth_Units"),
remove = FALSE)
samples_flagged$Date <- paste0("0", samples_flagged$Date)
samples_flagged$Date_formatted <- as.Date(samples_flagged$Date, format = "%m%d%Y")
samples_flagged$Date_formatted <- format(samples_flagged$Date_formatted, format = "%Y%m%d")
samples_flagged_selected <- samples_flagged %>%
rename(
SEAL_Sample_Name = Sample_Name,
Old_Date = Date,
Date = Date_formatted)  %>%
select(SEAL_Sample_Name,
Vial_ID,
Run_Number,
Conc,
Absorbance,
Dilution,
Unit,
Test,
Run_Time,
NOx_flag,
NH3_flag,
PO4_flag,
SO4_flag,
NO2_flag,
Conc_uM,
Conc_flag)
# Chunk 14: check sample ids with metadata
cat("Check Sample IDs with Metadata")
#check to see if all samples are present in the metadata
all_present <- all(samples_flagged_selected$Vial_ID %in% nutr_metadata$Vial_ID)
if (all_present) {
message("All sample IDs are present in metadata.")
} else {
message("Some sample IDs are missing from metadata.")
# Optional: Which ones are missing?
missing_ids <- setdiff(samples_flagged_selected$Sample_Name, nutr_metadata$NUTR_ID)
print(missing_ids)
}
#merge metadata with sample run data
merged_data <- samples_flagged_selected %>%
left_join(nutr_metadata, by = "Vial_ID")
# Chunk 15: Visualize Data
cat("Visualize Data")
### Nitrite + Nitrate
NOx_forplot <- merged_data %>%
filter(Test == "Nitrate (NOx)")
#group the data for plotting
NOx_forplot <- NOx_forplot %>%
mutate(row_num = factor(row_number())) %>%  # create row_num as factor per group
ungroup()
viz_NOx_plot <-  ggplot(data = NOx_forplot, aes(x = Vial_ID, y = Conc, fill=Treatment)) +
geom_bar(stat = "identity", position = position_dodge2(preserve = "single"),
color="black") +
facet_grid(~ Treatment, scales="free") +
theme_classic() +
labs(x= "Vial ID", y="NOx (mg/L)", title="Porewater NOx") +
theme(axis.text.x = element_text(angle = 90, hjust = 0.5))
viz_NOx_plot
### Ammonia
NH3_forplot <- merged_data %>%
filter(Test == "Ammonia (PPS)")
#group the data for plotting
NH3_forplot <- NH3_forplot %>%
mutate(row_num = factor(row_number())) %>%  # create row_num as factor per group
ungroup()
viz_NH3_plot <-  ggplot(data = NH3_forplot, aes(x = Vial_ID, y = Conc, fill=Treatment)) +
geom_bar(stat = "identity", position = position_dodge2(preserve = "single"),
color="black") +
facet_grid(~ Treatment, scales="free") +
theme_classic() +
labs(x= "Vial ID", y="NH3 (mg/L)", title="Porewater NH3") +
theme(axis.text.x = element_text(angle = 90, hjust = 0.5))
viz_NH3_plot
### Phosphate
PO4_forplot <- merged_data %>%
filter(Test == "Phosphate ")
#group the data for plotting
PO4_forplot <- PO4_forplot %>%
mutate(row_num = factor(row_number())) %>%  # create row_num as factor per group
ungroup()
viz_PO4_plot <-  ggplot(data = PO4_forplot, aes(x = Vial_ID, y = Conc, fill=Treatment)) +
geom_bar(stat = "identity", position = position_dodge2(preserve = "single"),
color="black") +
facet_grid(~ Treatment, scales="free") +
theme_classic() +
labs(x= "Vial ID", y="PO4 (mg/L)", title="Porewater PO4") +
theme(axis.text.x = element_text(angle = 90, hjust = 0.5))
viz_PO4_plot
### Sulfate
SO4_forplot <- merged_data %>%
filter(Test == "Sulfate")
#group the data for plotting
SO4_forplot <- SO4_forplot %>%
mutate(row_num = factor(row_number())) %>%  # create row_num as factor per group
ungroup()
viz_SO4_plot <-  ggplot(data = SO4_forplot, aes(x = Vial_ID, y = Conc, fill=Treatment)) +
geom_bar(stat = "identity", position = position_dodge2(preserve = "single"),
color="black") +
facet_grid(~ Treatment, scales="free") +
theme_classic() +
labs(x= "Vial ID", y="SO4 (mg/L)", title="Porewater SO4") +
theme(axis.text.x = element_text(angle = 90, hjust = 0.5))
viz_SO4_plot
### Nitrite
NO2_forplot <- merged_data %>%
filter(Test == "Nitrite")
#group the data for plotting
NO2_forplot <- NO2_forplot %>%
mutate(row_num = factor(row_number())) %>%  # create row_num as factor per group
ungroup()
viz_NO2_plot <-  ggplot(data = NO2_forplot, aes(x = Vial_ID, y = Conc, fill=Treatment)) +
geom_bar(stat = "identity", position = position_dodge2(preserve = "single"),
color="black") +
facet_grid(~ Treatment, scales="free") +
theme_classic() +
labs(x= "Vial ID", y="NO2 (mg/L)", title="Porewater NO2") +
theme(axis.text.x = element_text(angle = 90, hjust = 0.5))
viz_NO2_plot
print(viz_NOx_plot)
print(viz_NH3_plot)
print(viz_PO4_plot)
print(viz_SO4_plot)
print(viz_NO2_plot)
cat("Export Processed Data")
#pivot the data set wider to make it wide format
final_data1 <- merged_data %>%
pivot_wider(
id_cols = Vial_ID,
names_from = Test,
values_from = Conc,
names_glue = "{Test}_Conc"
)
final_data2 <- merged_data %>%
pivot_wider(
id_cols = Vial_ID,
names_from = Test,
values_from = Conc_uM,
names_glue = "{Test}_Conc_uM"
)
final_data3 <- merged_data %>%
pivot_wider(
id_cols = Vial_ID,
names_from = Test,
values_from = Conc_flag,
names_glue = "{Test}_Conc_flag"
)
head(merged_data)
#take out only the columns we want to merge
df_all_clean_cols <- merged_data %>%
select(Vial_ID, SEAL_Sample_Name, Box, Vial_number, Chamber_ID , Treatment , Depth_cm ,
Year, Month, Day, Analysis.day..FAUSTO...JADE.LEC.,
NOx_flag, NH3_flag, PO4_flag, SO4_flag, NO2_flag,
Notes)
df_all_clean_cols_one_row <- df_all_clean_cols %>%
group_by(Vial_ID) %>%
slice(1) %>%  # or use summarise() if you want to aggregate
ungroup()
#merge these together
data_list <- list(df_all_clean_cols_one_row, final_data1, final_data2, final_data3)
final_data4 <- reduce(data_list, full_join, by = c("Vial_ID"))
#Add project information
final_data_labeled <- final_data4 %>%
mutate(
Project = "COMPASS: OWC Root Exclusion",   # new column with same value on every row
Region = "LE",
Run_notes = run_notes,
Analysis_rundate = print(run_date)# new column with notes about the run
)
#Prepare data to be exported
final_data <- final_data_labeled %>%
rename(
Analysis_day_FAUSTO_JADE_LEC = Analysis.day..FAUSTO...JADE.LEC.,
NOx_Conc_mgL = `Nitrate (NOx)_Conc`,
NOx_Conc_uM = `Nitrate (NOx)_Conc_uM`,
NOx_Conc_Flag = `Nitrate (NOx)_Conc_flag`,
NOx_QAQC_Flag = NOx_flag,
NH3_Conc_mgL = `Ammonia (PPS)_Conc`,
NH3_Conc_uM = `Ammonia (PPS)_Conc_uM`,
NH3_Conc_Flag =`Ammonia (PPS)_Conc_flag`,
NH3_QAQC_Flag = NH3_flag,
PO4_Conc_mgL = `Phosphate _Conc`,
PO4_Conc_uM = `Phosphate _Conc_uM`,
PO4_Conc_Flag =`Phosphate _Conc_flag`,
PO4_QAQC_Flag = PO4_flag,
SO4_Conc_mgL = `Sulfate_Conc`,
SO4_Conc_uM = `Sulfate_Conc_uM`,
SO4_Conc_Flag =`Sulfate_Conc_flag`,
SO4_QAQC_Flag = SO4_flag,
NO2_Conc_mgL = `Nitrite_Conc`,
NO2_Conc_uM = `Nitrite_Conc_uM`,
NO2_Conc_Flag =`Nitrite_Conc_flag`,
NO2_QAQC_Flag = NO2_flag,
# add more rename pairs as needed
) %>%
select(Project, Region, Vial_ID, SEAL_Sample_Name, Box, Vial_number, Chamber_ID , Treatment , Depth_cm ,
Year, Month, Day, Analysis_day_FAUSTO_JADE_LEC,
NOx_Conc_mgL, NOx_Conc_uM, NOx_Conc_Flag, NOx_QAQC_Flag,
NH3_Conc_mgL, NH3_Conc_uM, NH3_Conc_Flag, NH3_QAQC_Flag,
PO4_Conc_mgL, PO4_Conc_uM, PO4_Conc_Flag, PO4_QAQC_Flag,
SO4_Conc_mgL, SO4_Conc_uM, SO4_Conc_Flag, SO4_QAQC_Flag,
NO2_Conc_mgL, NO2_Conc_uM, NO2_Conc_Flag, NO2_QAQC_Flag,
Analysis_rundate,  Run_notes, Notes)
#Write out data frame
write.csv(final_data, final_path)
#Write out data frame
write.csv(final_data, final_path)
#Combined Plot
Blks_Plots <- ggarrange(
NOx_blks_plot,
NH3_blks_plot,
PO4_blks_plot,
SO4_blks_plot,
NO2_blks_plot,
nrow = 2,
common.legend = TRUE,
legend = "bottom")
print(Blks_Plots)
#Combined Plot
Blks_Plots <- ggarrange(
NOx_blks_plot,
NH3_blks_plot,
PO4_blks_plot,
SO4_blks_plot,
NO2_blks_plot,
nrow = 2,
ncol = 3,
common.legend = TRUE,
legend = "bottom")
print(Blks_Plots)
Viz_Analyte_Plots <- ggarrange(
viz_NOx_plot,
viz_NH3_plot,
viz_PO4_plot,
viz_SO4_plot,
viz_NO2_plot,
nrow = 3,
ncol = 2,
common.legend = TRUE,
legend = "bottom")
print(Viz_Analyte_Plots)
Viz_Analyte_Plots <- ggarrange(
viz_NOx_plot,
viz_NH3_plot,
viz_PO4_plot,
viz_SO4_plot,
viz_NO2_plot,
nrow = 5,
ncol = 1,
common.legend = TRUE,
legend = "bottom")
print(Viz_Analyte_Plots)
Viz_Analyte_Plots <- ggarrange(
viz_NOx_plot,
viz_NH3_plot,
viz_PO4_plot,
viz_SO4_plot,
viz_NO2_plot,
nrow = 3,
ncol = 2,
common.legend = TRUE,
legend = "bottom")
print(Viz_Analyte_Plots)
print(viz_NOx_plot/viz_NH3_plot)
(viz_NOx_plot/viz_NH3_plot)
library(ggpattern)
library(patchwork)
(viz_NOx_plot/viz_NH3_plot)
viz_NOx_plot/viz_NH3_plot
viz_PO4_plot/viz_SO4_plot
viz_NO2_plot
viz_NOx_plot <-  ggplot(data = NOx_forplot, aes(x = Vial_ID, y = Conc, fill=Treatment)) +
geom_bar(stat = "identity", position = position_dodge2(preserve = "single"),
color="black") +
facet_grid(~ Treatment, scales="free") +
theme_classic() +
labs(x= "Vial ID", y="NOx (mg/L)", title="Porewater NOx") +
theme(axis.text.x = element_text(angle = 90, hjust = 0.5))+
theme_classic(base_size = 30) +
theme(axis.text.x = element_blank())
viz_NOx_plot
